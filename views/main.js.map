{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/form/form.component.html","webpack:///./src/app/form/form.component.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/navbar/navbar.component.html","webpack:///./src/app/navbar/navbar.component.ts","webpack:///./src/app/notes/notes.component.html","webpack:///./src/app/notes/notes.component.ts","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/router.module.ts","webpack:///./src/app/services/login.service.ts","webpack:///./src/app/services/note.service.ts","webpack:///./src/app/services/register.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","<router-outlet></router-outlet>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule  } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { NotesComponent } from './notes/notes.component';\nimport { FormComponent } from './form/form.component';\nimport { NoteService } from './services/note.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { LoginComponent } from './login/login.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { RegisterComponent } from './register/register.component';\nimport { AppRoutingModule } from './router.module';\nimport { RouterModule } from '@angular/router';\n\n\nimport { LoginService } from './services/login.service';\nimport { RegisterService } from './services/register.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NotesComponent,\n    FormComponent,\n    LoginComponent,\n    RegisterComponent,\n    NavbarComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    RouterModule,\n    ReactiveFormsModule\n  ],\n  providers: [NoteService, LoginService,RegisterService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<form #formNote=\"ngForm\" (ngSubmit)=\"addNote(formNote)\">\n  <h3 class=\"text-header text-center\">Add note</h3>\n    <div class=\"form-group\">\n      <label>Title note</label>\n      <input type=\"text\" [(ngModel)]=\"titleNote\" name=\"titleNote\" class=\"form-control\">\n    </div>\n    <div class=\"form-group\">\n      <label>Description</label>\n      <textarea class=\"form-control\" [(ngModel)]=\"description\" name=\"description\">\n\n      </textarea>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block\">Save</button>\n  </form>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { NoteService } from '../services/note.service';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n\n\n  public titleNote: String;\n  public description: String;\n  @Output() noteData: EventEmitter<any> = new EventEmitter();\n  \n\n\n\n  constructor(private _noteService: NoteService) { this._noteService.getNotes(); }\n\n  ngOnInit() {}\n\n  public addNote(form: NgForm): any {\n    if((form.value.titleNote!='') && (form.value.description='')) {\n      const note = {\n        'title': form.value.titleNote,\n        'description': form.value.description,\n        'userId': localStorage.getItem(\"user-id-notes\")\n      };\n      this._noteService.addNote(note).subscribe((res) => {\n        console.log(res);\n        this.noteData.emit(res.Note);\n  \n        // reset form\n        form.reset()\n      }, (err) => console.log(err));\n    }\n    \n  }\n\n\n}\n","<div class=\"limiter\">\n    <div class=\"container-login100\">\n        <div class=\"wrap-login100\">\n            <form class=\"login100-form validate-form\" #loginForm=\"ngForm\" (ngSubmit)=\"applyLogin(loginForm)\">\n                <span class=\"login100-form-title p-b-43\">\n                    Login to continue\n                </span>\n                \n                <div class=\"alert alert-danger\" *ngIf=\"loginError\">\n                    <p>{{ loginError }}</p>\n                </div>  \n                \n                <div class=\"wrap-input100 validate-input\">\n                    <input type=\"text\" class=\"form-control form-control-lg\" placeholder=\"Email\" [(ngModel)]=\"email\" name=\"email\">\n                </div>\n                \n                \n                <div class=\"wrap-input100\" >\n                    <input type=\"password\" class=\"form-control form-control-lg\" placeholder=\"Password\" [(ngModel)]=\"password\" name=\"password\">\n                </div>  \n                <br>\n                <div class=\"\">\n                    <input type=\"submit\" class=\"btn btn-primary btn-lg btn-block login\"  value=\"Login\">\n                        \n                </div>\n                \n                <div class=\"text-center p-t-46 p-b-20\">\n                    <span class=\"txt2\">\n                        or <a href=\"\" routerLink=\"/register\">sign up</a>\n                    </span>\n                </div>\n\n                <!-- <div class=\"login100-form-social flex-c-m\">\n                    <a href=\"#\" class=\"login100-form-social-item flex-c-m bg1 m-r-5\">\n                        <i class=\"fa fa-facebook-f\" aria-hidden=\"true\"></i>\n                    </a>\n\n                    <a href=\"#\" class=\"login100-form-social-item flex-c-m bg2 m-r-5\">\n                        <i class=\"fa fa-twitter\" aria-hidden=\"true\"></i>\n                    </a>\n                </div> -->\n            </form>\n\n            <div class=\"login100-more\" style=\"background-image: url('assets/images/notes.png');\">\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { LoginService } from '../services/login.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  public loginError: String;\n  public email: String;\n  public password: String;\n\n  constructor(private _loginService: LoginService, public router: Router) { }\n\n  ngOnInit() {\n    // check if there is a token in the browser, ==> redirect him to myNotes component\n    if(localStorage.getItem(\"token\")){\n      \n      this.router.navigate([\"notes\", localStorage.getItem(\"user-id-notes\")])\n    }\n  }\n\n\n  public applyLogin(formValue) {\n    this._loginService.login(formValue.value).subscribe( (res: any) => {\n\n      \n      if(res.auth == true){\n        // store the token on the browser\n        localStorage.setItem(\"token\", res.token)\n        localStorage.setItem(\"user-id-notes\", res.user_id);\n        this.loginError = \"\"\n\n        // navigate to the note component\n\n        this.router.navigate([\"notes\", res.user_id])\n      }\n     \n    }, (err) => {\n        this.loginError = err.error.message\n    });\n  }\n\n}\n","<nav class=\"navbar navbar-expand-md navbar-dark bg-dark\">\n  <a class=\"navbar-brand\" href=\"#\">PlanNote</a>\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n  <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n    <ul class=\"navbar-nav ml-auto\">\n      <li class=\"nav-item active\">\n        <a class=\"nav-link\" href=\"#\" (click)=\"logout()\">Logout</a>\n      </li>\n    </ul>\n  </div>\n</nav> <br><br>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(public router: Router) { }\n\n  ngOnInit() {\n  }\n\n\n  public logout() {\n    localStorage.removeItem(\"token\")\n    localStorage.removeItem(\"user-id-notes\")\n    this.router.navigateByUrl(\"/login\")\n  }\n}\n","<app-navbar></app-navbar>\n<div class=\"row\">\n    <div class=\"col col-md-3\">\n        <app-form (noteData)=\"getNoteFromForm($event)\"></app-form>\n      </div>\n\n\n    <div class=\"col col-md-9 justify-content-md-center\">\n      <div *ngIf=\"listNotes.length == 0\">\n        You don't have any notes!\n        Try to add some\n      </div>\n      <div class=\"note ui-draggable ui-draggable-handle\"  *ngFor=\"let item of listNotes\">\n          <a href=\"javascript:;\" #noteID id=\"{{item._id}}\" class=\"button remove\" data-toggle=\"modal\" data-target=\"#modal-delete\" (click)=\"getNoteId(noteID)\">X</a>\n          <div class=\"note_cnt\">\n             <h5 class=\"text-center\">{{item.title}}</h5>\n             <p> {{ item.description}} </p>\n          </div> \n      </div>\n  </div>\n</div>\n\n\n\n<!-- Delete confirmation -->\n<div class=\"modal fade\" id=\"modal-delete\" data-backdrop=\"static\" data-keyboard=\"false\"  >\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h4 class=\"modal-title\">Confirmation</h4>\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n        </div>\n        <div class=\"modal-body\">\n          Are you sure to delete this note...??\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn\" data-dismiss=\"modal\" style=\"color:white\">No..!</button>\n          <button type=\"button\" class=\"btn btn-primary\" (click)=\"deleteNote()\" data-dismiss=\"modal\" style=\"color:white\">Yes..!</button>\n        </div>\n  \n      </div>\n    </div>\n  </div>","import { Component, OnInit } from '@angular/core';\nimport { NoteService } from '../services/note.service';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-notes',\n  templateUrl: './notes.component.html',\n  styleUrls: ['./notes.component.scss']\n})\nexport class NotesComponent implements OnInit {\n\n  listNotes: any = [];\n  noteIdUi;\n\n  constructor(private _noteService: NoteService, public router: Router) {}\n\n  ngOnInit() {\n\n    // check if token is founded\n    if(localStorage.getItem(\"token\")){\n\n      // get all notes from that user\n      this._noteService.getNotes().subscribe((res) => {\n        this.listNotes = res.notes;\n      });\n    }else{\n      // redirect to the login page\n      this.router.navigate([\"login\"])\n    }\n    \n  }\n\n\n  public getNoteFromForm(event) {\n    this.listNotes.splice(0, 0, event);\n  }\n\n  public getNoteId(noteID) {\n    this.noteIdUi = noteID.id\n    //console.log(this.noteIdUi)\n  }\n\n  public deleteNote(){\n    console.log(this.noteIdUi+\", before sending\")\n     this._noteService.deleteNote(this.noteIdUi).subscribe( (res) => {\n        this.listNotes.splice(this.listNotes.findIndex(e => e._id === this.noteIdUi),1);\n        console.log(\"result\"+res)\n     }, (err) => {\n       console.log(err)\n     })\n  }\n}\n","<div class=\"limiter\">\n        <div class=\"container-login100\">\n            <div class=\"wrap-login100\">\n                <form class=\"login100-form validate-form\" [formGroup]=\"registerForm\" (ngSubmit)=\"doRegister()\">\n                    <span class=\"login100-form-title p-b-43\">\n                        Register here\n                    </span>\n                    \n                    <div class=\"alert alert-danger\" *ngIf=\"otherServerErrors.length!=0\">\n                        <p *ngFor=\"let error of otherServerErrors\">{{ error.msg }}</p>\n                    </div>  \n\n                    <div class=\"alert alert-success\" *ngIf=\"successMesg\">\n                        <p>{{ successMesg }}</p>\n                    </div>  \n\n                    \n                    <div class=\"wrap-input100 validate-input\">\n                        <input type=\"text\" class=\"form-control form-control-lg\" name=\"firstname\" placeholder=\"Firstname...\"  formControlName=\"firstname\">\n                        <div class=\"errors\" *ngIf=\"registerForm.controls['firstname'].touched && !registerForm.controls['firstname'].valid\">\n                            <span class=\"text-danger\" *ngIf=\"registerForm.controls['firstname'].errors.required\">Firstname field is required</span>\n                        </div>\n                    </div>\n                    <br>\n                    \n                    <div class=\"wrap-input100\" >\n                        <input type=\"text\" class=\"form-control form-control-lg\" name=\"lastname\" placeholder=\"Lastname...\"  formControlName=\"lastname\">\n                        <div class=\"errors\" *ngIf=\"registerForm.controls['lastname'].touched && !registerForm.controls['lastname'].valid\">\n                            <span class=\"text-danger\" *ngIf=\"registerForm.controls['lastname'].errors.required\">Lastname field is required</span>\n                        </div>\n                    </div>\n                    <br>\n\n                    <div class=\"wrap-input100\" >\n                        <input type=\"text\" class=\"form-control form-control-lg\" name=\"v\" placeholder=\"Email adresse...\"  formControlName=\"email_adresse\">\n                        <div class=\"errors\" *ngIf=\"registerForm.controls['email_adresse'].touched && !registerForm.controls['email_adresse'].valid\">\n                            <span class=\"text-danger\" *ngIf=\"registerForm.controls['email_adresse'].errors.required\">Email field is required</span>\n                            <span class=\"text-danger\" *ngIf=\"registerForm.controls['email_adresse'].errors.email\">Email is wrong, it should be like xzy@exemple.xyz</span>\n                        </div>\n\n                        <div *ngIf=\"registerForm.valid && customEmailError\">\n                            <span class=\"text-danger\">{{customEmailError}}</span>\n                        </div>\n                    </div>\n                    <br>\n\n                    <div class=\"wrap-input100\" >\n                        <input type=\"password\" class=\"form-control form-control-lg\"  name=\"password\" placeholder=\"Password....\"  formControlName=\"password\" minlength=\"5\">\n                        <div class=\"errors\" *ngIf=\"registerForm.controls['password'].touched && !registerForm.controls['password'].valid\">\n                            <span class=\"text-danger\" *ngIf=\"registerForm.controls['password'].errors.required\">Password field is required</span>\n                            <span class=\"text-danger\" *ngIf=\"registerForm.controls['password'].errors.minlength\">Password must be at least 5 characters long</span>\n\n                        </div>\n                    </div>\n\n                    <div class=\"\">\n                        <input type=\"submit\" class=\"btn btn-primary btn-lg btn-block register\" [disabled]=\"!registerForm.valid\" value=\"Register\">\n                            \n                    </div>\n                    \n                    <div class=\"text-center p-t-46 p-b-20\">\n                        <span class=\"txt2\">\n                            or <a href=\"\" routerLink=\"/login\">Login</a>\n                        </span>\n                    </div>\n\n                </form>\n    \n                <div class=\"login100-more\" style=\"background-image: url('assets/images/notes.png');\">\n                </div>\n            </div>\n        </div>\n    </div>","import { Component, OnInit } from '@angular/core';\nimport { NgForm,FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { RegisterService } from '../services/register.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  otherServerErrors = [];\n  successMesg: String;\n  registerForm: FormGroup;\n\n  customEmailError: String;\n\n  constructor(private _registerService: RegisterService, private formBuilder: FormBuilder, public router: Router) { }\n\n  ngOnInit() {\n\n     // check if there is a token in the browser, ==> redirect him to myNotes component\n     if(localStorage.getItem(\"token\")){\n      this.router.navigate([\"notes\", localStorage.getItem(\"user-id-notes\")])\n    }\n    this.createRegister()\n  }\n\n\n  createRegister() {\n    this.registerForm = this.formBuilder.group({\n      firstname: ['',Validators.required],\n      lastname: ['',Validators.required],\n      email_adresse: ['',Validators.compose([Validators.required,Validators.email])],\n      password: ['',Validators.compose([Validators.required,Validators.minLength(5)])]\n\n    })\n  }\n\n  doRegister() {\n    this._registerService.register(this.registerForm.value).subscribe( (res) => {\n        this.successMesg = \"Register successed....\"\n        this.otherServerErrors = []\n        this.customEmailError = \"\"\n        console.log(res)\n        this.registerForm.reset()\n    }, (err) => {\n\n      for(let i=0;i<err.error.errors.length;i++){\n        if(err.error.errors[i].param == \"email\") {\n          this.customEmailError = \"E-mail already in use\"\n        }else{\n          this.otherServerErrors.push(err.error.errors[i])\n        }\n      }\n      console.log(this.otherServerErrors)\n    })\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { NotesComponent } from './notes/notes.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\nexport const routes: Routes  = [\r\n    {path: '', component: LoginComponent},\r\n    {path: 'login', component: LoginComponent},\r\n    {path: 'register', component: RegisterComponent},\r\n    {path: 'notes/:user-id', component: NotesComponent}\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule {}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private _http: HttpClient) { }\n\n\n  public login(loginInformation) {\n    return this._http.post('http://localhost:3000/api/login', loginInformation);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoteService {\n  private userId;\n  constructor(private _http: HttpClient) { this.userId = localStorage.getItem(\"user-id-notes\")}\n\n  public getNotes(): any {\n    return this._http.get('http://localhost:3000/api/list/'+this.userId);\n  }\n\n  public addNote(note): any {\n    return this._http.post('http://localhost:3000/api/add-note', note);\n  }\n\n  public deleteNote(noteId): any {\n    return this._http.delete('http://localhost:3000/api/delete-note/'+noteId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterService {\n\n  constructor(private _http: HttpClient) { }\n\n\n  public register(userData) {\n    return this._http.post(\"http://localhost:3000/api/register\",userData);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}